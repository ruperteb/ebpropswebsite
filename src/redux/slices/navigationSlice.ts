import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../redux/store';
import { current } from '@reduxjs/toolkit'


export interface NavigationState {
    currentPage: number;
    currentPageURL: string
    scrollY: number;
   
}

const initialState: NavigationState = {
    currentPage: 0,
    currentPageURL: "#home",
    scrollY: 0,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const navigationSlice = createSlice({
    name: 'navigation',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setCurrentPage: (state, action: PayloadAction<number>) => {
            state.currentPage = action.payload; 
        },
        setCurrentPageURL: (state, action: PayloadAction<string>) => {
            state.currentPageURL = action.payload;
        },
        // Use the PayloadAction type to declare the contents of `action.payload`
        setScrollY: (state, action: PayloadAction<number>) => {
            state.scrollY = action.payload;
            /* console.log(current(state)) */
        },
        
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    /* extraReducers: (builder) => {
        builder
            .addCase(incrementAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(incrementAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.value += action.payload;
            });
    }, */
});

export const { setCurrentPage, setCurrentPageURL, setScrollY } = navigationSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCurrentPage = (state: RootState) => state.navigation.currentPage;

export const selectCurrentPageURL = (state: RootState) => state.navigation.currentPageURL;

export const selectScrollY = (state: RootState) => state.navigation.scrollY;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
/* export const incrementIfOdd = (amount: number): AppThunk => (
    dispatch,
    getState
) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
        dispatch(incrementByAmount(amount));
    }
}; */

export default navigationSlice.reducer;
